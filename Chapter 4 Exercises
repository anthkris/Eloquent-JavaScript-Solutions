//Sum of a Range
function range (start, end, step){
  var rangeArray = [];
  //create condition if step should be undefined
  if (step === undefined) step = 1;
  //author solution does not include this
  var larger = Math.max(start, end);
  var smaller = Math.min(start, end);
  if (step < 0) {
  	for (var i = larger; i >= smaller; i+=step){
        rangeArray.push(i);
      }
  } else {
    for (var i = smaller; i <= larger; i+=step){
      rangeArray.push(i);
    }
  }
  return rangeArray;
}


function sum (arr){
  var arrSum = 0;
  for (var i = 0; i<arr.length; i++){
  arrSum += arr[i];
  }
  return arrSum;
}
//Test cases
console.log (range(1, 10));
console.log(sum(range(1, 10)));
// → 55
console.log(range(5, 2, -1));
// → [5, 4, 3, 2]


// Reverse Arrays
function reverseArray (arr){
	var reversedArray = [];
  var originalLength = arr.length; 
  for(var i = 0; i < originalLength; i++){
  	reversedArray.push(arr.pop());
  }
  return reversedArray;
}

function reverseArrayInPlace (arr){
	var originalLength = Math.floor(arr.length/2); 
  
 	for(var i = 0, j = arr.length-1-i; i < originalLength; i++, j--){
      	var swap = arr[i];
  		arr[i] = arr[j];
      arr[j] = swap;
      
  }
  
}
//test cases
console.log(reverseArray(["A", "B", "C"]));
// → ["C", "B", "A"];
var arrayValue = [1, 2, 3, 4, 5];
reverseArrayInPlace(arrayValue);
console.log(arrayValue);
// → [5, 4, 3, 2, 1]

//Array to List and List to Array
function arrayToList (arr){
  for ( var i = arr.length - 1; i >=0; i--){
    //assign values this way?
    //works backwards from last item in the array to the first 
    //in order to get nested lists
    var list = { value: arr[i], rest: list};
  }
  return list;
}

function listToArray (list){
  var listArray = [];
  //node begins as list; while node is not undefined; node becomes node.rest
  //this moves from the outermost list to the innermost sublist
  for (var node = list; node; node = node.rest){
  	listArray.push(node.value);
  }
  return listArray;
}
//assigns keys and values just like arrayToList
function prepend (elem, list){
  var newList = {value: elem, rest: list};
  return newList;
}
//recursive version
function nth (list, num){
  	
  //if not list, return undefined
  if (!list){
  	return undefined;
    //if num is 0, you can return whatever is at value
    //because that is the outermost list
  } else if (num === 0){
  	return list.value;
    //if num is not 0, it refers to an inner list
    //in that case, pass in list.rest to get to the next layer down
    //keep going down until num ==== 0
  } else {
  	return nth(list.rest, num-1);
  }
}

/* my original solution
function nth (list, num){
	var listArray = listToArray(list);
    return listArray[num];
}
*/
console.log(arrayToList([10, 20]));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(listToArray(arrayToList([10, 20, 30])));
// → [10, 20, 30]
console.log(prepend(10, prepend(20, null)));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(nth(arrayToList([10, 20, 30]), 2));
// → 20

//Deep Equal function comparing two objects
function deepEqual(a, b) {
  //first compare with triple equals to see if the two are the same type and value
  if (a === b) return true;
  //second if statement checks for null values and non-objects
  if (a == null || typeof a != "object" ||
      b == null || typeof b != "object")
    return false;
  //declare counters
  var propsInA = 0, propsInB = 0;
	//for-in loop counts the number of properties in a and b
  for (var prop in a)
    propsInA += 1;

  for (var prop in b) {
    propsInB += 1;
    //if b has a prop not in a or if, upon recursive function all,
    //the properties don't have the same values, return false
    if (!(prop in a) || !deepEqual(a[prop], b[prop]))
      return false;
  }
	//otherwise, return whether the number of properties are the same
  return propsInA == propsInB;
}

var obj = {here: {is: "an"}, object: 2};
console.log(deepEqual(obj, obj));
// → true
console.log(deepEqual(obj, {here: 1, object: 2}));
// → false
console.log(deepEqual(obj, {here: {is: "an"}, object: 2}));
// → true
